plugins {
	alias(libs.plugins.android.application)
	alias(libs.plugins.kotlin.android)
}

def reflexDir = gradle.ext.reflexDir
def resFile = "${projectDir.absolutePath}/../../../resources.xml"
def abisForDebug = ['x86', 'arm64-v8a', 'x86_64']
def abisForRelease = project.hasProperty("fullBuild") ? abisForDebug : ['arm64-v8a']


android {
	namespace 'com.reflex.reflex'
	compileSdk 35

	buildTypes {
		debug { // Processor architectures (ABIs) supported by precompiled reflex libs
			ndk {
				abiFilters.addAll abisForDebug
			}
		}

		release {
			ndk {
				abiFilters.addAll abisForRelease
			}

			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
	}

	defaultConfig {
		applicationId "com.reflex.reflex"
		minSdk 28
		targetSdk 35
		versionCode 1
		versionName "1.0"

		externalNativeBuild {
			cmake {
				arguments "-DANDROID_STL=c++_shared"
				arguments "-DREFLEX_DIR=$reflexDir"
			}
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_11
		targetCompatibility JavaVersion.VERSION_11
	}

	kotlinOptions {
		jvmTarget = '11'
	}

	buildFeatures {
		prefab true
	}

	externalNativeBuild {
		cmake {
			path file('CMakeLists.txt')
			version '3.22.1'
		}
	}

	tasks.register('buildReflexResources', Exec) {
		assert file(resFile).exists()
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			commandLine "$reflexDir/bin/tools/win/ReflexResourceBuilder.exe", resFile
		} else {
			commandLine 'sh', './update-resources-macos.sh', "$reflexDir/bin/tools/macos/ReflexResourceBuilder.dmg", resFile
		}
	}

	preBuild.dependsOn buildReflexResources
}

dependencies {
	implementation libs.androidx.core.ktx
	implementation libs.androidx.appcompat
	implementation libs.material
	implementation libs.oboe

	var reflexBin = "$reflexDir/bin/lib/android"
	debugImplementation(files("$reflexBin/debug/reflex.aar"))
	releaseImplementation(files("$reflexBin/release/reflex.aar"))
}